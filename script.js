[{"insert":"window.onload = function() {\n    // Collapsible content for Influencing Factors\n    document.querySelectorAll('#factors-container button').forEach(button => {\n        button.addEventListener('click', function() {\n            const content = this.nextElementSibling.querySelector('.collapsible-content'); // Select the actual collapsible content div\n            const icon = this.querySelector('span:last-child');\n            if (content.style.maxHeight) {\n                content.style.maxHeight = null;\n                icon.style.transform = 'rotate(0deg)';\n            } else {\n                // Close other open items\n                document.querySelectorAll('#factors-container .collapsible-content').forEach(item => {\n                    item.style.maxHeight = null;\n                    item.closest('.content-card').querySelector('button span:last-child').style.transform = 'rotate(0deg)'; // Adjust to find the correct button's icon\n                });\n                content.style.maxHeight = content.scrollHeight + \"px\";\n                icon.style.transform = 'rotate(45deg)';\n            }\n        });\n    });\n\n    // Cost Estimation Logic\n    const estimatorForm = document.getElementById('estimatorForm');\n    const areaInput = document.getElementById('area');\n    const floorsInput = document.getElementById('floors');\n    const styleSelect = document.getElementById('style');\n    const finishSelect = document.getElementById('finish');\n    const foundationTypeSelect = document.getElementById('foundation_type');\n    const mezzanineOptionSelect = document.getElementById('mezzanine_option');\n    const rooftopOptionSelect = document.getElementById('rooftop_option');\n    const roofTypeSelect = document.getElementById('roof_type');\n    const emailInput = document.getElementById('email');\n\n    const resultsSection = document.getElementById('resultsSection');\n    const estimatedCostDisplay = document.getElementById('estimatedCost');\n    const costLoadingSpinner = document.getElementById('costLoadingSpinner');\n    const costError = document.getElementById('costError');\n    const emailNotification = document.getElementById('emailNotification');\n    const detailedBreakdownTableBody = document.getElementById('detailedBreakdownTableBody');\n    const paymentScheduleTableBody = document.getElementById('paymentScheduleTableBody');\n    const sendEmailBtn = document.getElementById('sendEmailBtn');\n    const ctxCostBreakdown = document.getElementById('costBreakdownChart').getContext('2d');\n\n    let lastQuoteData = null;\n\n    let costBreakdownChart = new Chart(ctxCostBreakdown, {\n        type: 'bar',\n        data: {\n            labels: ['Phần thô', 'Hoàn thiện', 'M&E', 'Thiết kế & Giấy phép', 'Dự phòng'],\n            datasets: [{\n                label: 'Phân bổ Chi phí',\n                data: [0, 0, 0, 0, 0],\n                backgroundColor: [\n                    'rgba(251, 191, 36, 0.7)', /* Golden Yellow */\n                    'rgba(245, 158, 11, 0.7)',  /* Orange-Yellow */\n                    'rgba(217, 119, 6, 0.7)',   /* Darker Orange */\n                    'rgba(180, 83, 9, 0.7)',    /* Brownish Orange */\n                    'rgba(124, 45, 6, 0.7)'     /* Darkest Orange */\n                ],\n                borderColor: [\n                    'rgb(251, 191, 36)',\n                    'rgb(245, 158, 11)',\n                    'rgb(217, 119, 6)',\n                    'rgb(180, 83, 9)',\n                    'rgb(124, 45, 6)'\n                ],\n                borderWidth: 1\n            }]\n        },\n        options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n                y: {\n                    beginAtZero: true,\n                    title: {\n                        display: true,\n                        text: 'Tỷ lệ (%)',\n                        color: '#3a3a3a'\n                    },\n                    ticks: {\n                        color: '#3a3a3a'\n                    },\n                    grid: {\n                        color: 'rgba(0, 0, 0, 0.1)'\n                    }\n                },\n                x: {\n                    ticks: {\n                        callback: function(value, index, values) {\n                            const label = this.getLabelForValue(value);\n                            if (label.length > 16) {\n                                return label.split(' ').reduce((acc, word) => {\n                                    if (acc[acc.length - 1].length + word.length + 1 > 16) {\n                                        acc.push(word);\n                                    } else {\n                                        acc[acc.length - 1] += (acc[acc.length - 1] ? ' ' : '') + word;\n                                    }\n                                    return acc;\n                                }, ['']);\n                            }\n                            return label;\n                        },\n                        color: '#3a3a3a'\n                    },\n                    grid: {\n                        color: 'rgba(0, 0, 0, 0.1)'\n                    }\n                }\n            },\n            plugins: {\n                legend: {\n                    display: false\n                },\n                tooltip: {\n                    callbacks: {\n                        label: function(context) {\n                            let label = context.dataset.label || '';\n                            if (label) {\n                                label += ': ';\n                            }\n                            if (context.parsed.y !== null) {\n                                label += context.parsed.y + '%';\n                            }\n                            return label;\n                        }\n                    }\n                },\n                title: {\n                    display: true,\n                    text: 'PHÂN BỔ CHI PHÍ ƯỚC TÍNH (TỶ LỆ PHẦN TRĂM)',\n                    font: { size: 16, family: 'Arial', color: '#3a3a3a' }\n                }\n            }\n        }\n    });\n\n    estimatorForm.addEventListener('submit', (event) => {\n        event.preventDefault();\n\n        const area = parseFloat(areaInput.value);\n        const floors = parseInt(floorsInput.value);\n        const email = emailInput.value;\n\n        if (isNaN(area) || area <= 0 || isNaN(floors) || floors <= 0) {\n            costError.textContent = 'Vui lòng nhập diện tích và số tầng hợp lệ.';\n            costError.classList.remove('hidden');\n            emailNotification.classList.add('hidden');\n            resultsSection.classList.add('hidden');\n            return;\n        } else {\n            costError.classList.add('hidden');\n        }\n\n        costLoadingSpinner.style.display = 'block';\n        resultsSection.classList.add('hidden');\n        emailNotification.classList.add('hidden');\n\n        setTimeout(() => {\n            const style = styleSelect.value;\n            const finish = finishSelect.value;\n            const foundationType = foundationTypeSelect.value;\n            const mezzanineOption = mezzanineOptionSelect.value;\n            const rooftopOption = rooftopOptionSelect.value;\n            const roofType = roofTypeSelect.value;\n\n            let baseCostPerSqM = 5000000;\n\n            if (style === 'neoclassical') baseCostPerSqM *= 1.2;\n            else if (style === 'minimalist') baseCostPerSqM *= 0.95;\n\n            if (finish === 'standard') baseCostPerSqM *= 1.15;\n            else if (finish === 'premium') baseCostPerSqM *= 1.35;\n\n            let floorFactor = 1;\n            if (floors === 2) floorFactor = 1.05;\n            else if (floors === 3) floorFactor = 1.1;\n            else if (floors === 4) floorFactor = 1.15;\n            else if (floors > 4) floorFactor = 1.2;\n\n            let foundationFactor = 1;\n            if (foundationType === 'strip') foundationFactor = 1.05;\n            else if (foundationType === 'pile') foundationFactor = 1.10;\n            \n            let mezzanineFactor = (mezzanineOption === 'yes') ? 1.03 : 1;\n            \n            let rooftopFactor = (rooftopOption === 'yes') ? 1.02 : 1;\n\n            let roofFactor = 1;\n            if (roofType === 'thai') roofFactor = 1.05;\n            else if (roofType === 'japanese') roofFactor = 1.07;\n            \n            const totalArea = area * floors;\n            const totalEstimatedCost = totalArea * baseCostPerSqM * floorFactor * foundationFactor * mezzanineFactor * rooftopFactor * roofFactor;\n\n            lastQuoteData = {\n                area,\n                floors,\n                style: styleSelect.options[styleSelect.selectedIndex].text,\n                finish: finishSelect.options[finishSelect.selectedIndex].text,\n                foundationType: foundationTypeSelect.options[foundationTypeSelect.selectedIndex].text,\n                mezzanineOption: mezzanineOptionSelect.options[mezzanineOptionSelect.selectedIndex].text,\n                rooftopOption: rooftopOptionSelect.options[rooftopOptionSelect.selectedIndex].text,\n                roofType: roofTypeSelect.options[roofTypeSelect.selectedIndex].text,\n                email,\n                totalEstimatedCost\n            };\n\n            estimatedCostDisplay.textContent = `${totalEstimatedCost.toLocaleString('vi-VN')} VNĐ`;\n            \n            const breakdownPercentages = {\n                'basic':    { rough: 40, finishing: 30, me: 15, design: 10, contingency: 5 },\n                'standard': { rough: 35, finishing: 35, me: 15, design: 10, contingency: 5 },\n                'premium':  { rough: 30, finishing: 40, me: 15, design: 10, contingency: 5 }\n            };\n            const currentBreakdownPercents = breakdownPercentages[finish];\n            \n            costBreakdownChart.data.datasets[0].data = Object.values(currentBreakdownPercents);\n            costBreakdownChart.update();\n\n            const detailedItems = {\n                'Phần thô': {\n                    'Móng, kết cấu': 0.60 * currentBreakdownPercents.rough,\n                    'Xây tô, chống thấm': 0.40 * currentBreakdownPercents.rough\n                },\n                'Hoàn thiện': {\n                    'Ốp lát (sàn, tường)': 0.30 * currentBreakdownPercents.finishing,\n                    'Sơn nước, trần thạch cao': 0.25 * currentBreakdownPercents.finishing,\n                    'Cửa, lan can, cầu thang': 0.25 * currentBreakdownPercents.finishing,\n                    'Thiết bị vệ sinh': 0.20 * currentBreakdownPercents.finishing\n                },\n                'Hệ thống M&E': {\n                    'Hệ thống điện': 0.50 * currentBreakdownPercents.me,\n                    'Hệ thống cấp thoát nước': 0.50 * currentBreakdownPercents.me\n                },\n                'Chi phí khác': {\n                    'Thiết kế & Giấy phép': currentBreakdownPercents.design,\n                    'Dự phòng': currentBreakdownPercents.contingency\n                }\n            };\n\n            detailedBreakdownTableBody.innerHTML = '';\n            for (const mainCategory in detailedItems) {\n                let firstRow = true;\n                const subItems = detailedItems[mainCategory];\n                const rowSpan = Object.keys(subItems).length;\n                for (const subItem in subItems) {\n                    const cost = totalEstimatedCost * (subItems[subItem] / 100);\n                    const row = document.createElement('tr');\n                    let mainCategoryCell = '';\n                    if (firstRow) {\n                        mainCategoryCell = `<td rowspan=\"${rowSpan}\" class=\"align-top font-semibold\">${mainCategory}</td>`;\n                        firstRow = false;\n                    }\n                    row.innerHTML = `\n                        ${mainCategoryCell}\n                        <td>${subItem}</td>\n                        <td class=\"text-right\">${cost.toLocaleString('vi-VN')}</td>\n                    `;\n                    detailedBreakdownTableBody.appendChild(row);\n                }\n            }\n\n            const paymentStages = [\n                { stage: 1, description: 'Tạm ứng ngay khi ký hợp đồng', percentage: 15 },\n                { stage: 2, description: 'Sau khi hoàn thành phần móng', percentage: 20 },\n                { stage: 3, description: 'Sau khi hoàn thành kết cấu khung bê tông', percentage: 20 },\n                { stage: 4, description: 'Sau khi hoàn thành xây tô, đi hệ thống M&E', percentage: 20 },\n                { stage: 5, description: 'Hoàn thiện, trước khi bàn giao nhà', percentage: 23 },\n                { stage: 6, description: 'Bảo hành công trình (sau khi bàn giao)', percentage: 2 }\n            ];\n\n            paymentScheduleTableBody.innerHTML = '';\n            paymentStages.forEach(item => {\n                const amount = totalEstimatedCost * (item.percentage / 100);\n                const row = document.createElement('tr');\n                row.innerHTML = `\n                    <td class=\"text-center\">${item.stage}</td>\n                    <td>${item.description}</td>\n                    <td class=\"text-right\">${item.percentage}%</td>\n                    <td class=\"text-right font-semibold\">${amount.toLocaleString('vi-VN')}</td>\n                `;\n                paymentScheduleTableBody.appendChild(row);\n            });\n\n            resultsSection.classList.remove('hidden');\n            costLoadingSpinner.style.display = 'none';\n\n        }, 800);\n    });\n\n    sendEmailBtn.addEventListener('click', () => {\n        if (!lastQuoteData) {\n            alert('Lỗi: Không có dữ liệu báo giá. Vui lòng thực hiện ước tính trước.');\n            return;\n        }\n\n        emailNotification.textContent = 'Đang chuẩn bị mở trình gửi email của bạn...';\n        emailNotification.classList.remove('hidden');\n\n        const { email, area, floors, style, finish, foundationType, mezzanineOption, rooftopOption, roofType, totalEstimatedCost } = lastQuoteData;\n\n        const recipient = 'esb.homes.company@gmail.com';\n        const subject = `Yêu cầu Báo giá Xây dựng - ${email}`;\n        const body = `\nChào ESB Homes,\n\nTôi muốn yêu cầu báo giá chi tiết dựa trên các thông tin sau:\n\n--- CHI TIẾT DỰ ÁN ---\n- Email liên hệ: ${email}\n- Diện tích sàn: ${area} m²\n- Số tầng: ${floors}\n- Phong cách: ${style}\n- Mức độ hoàn thiện: ${finish}\n- Loại móng: ${foundationType}\n- Có tầng lửng: ${mezzanineOption}\n- Có sân thượng: ${rooftopOption}\n- Loại mái: ${roofType}\n\n--- CHI PHÍ ƯỚC TÍNH SƠ BỘ ---\n- Tổng chi phí: ${totalEstimatedCost.toLocaleString('vi-VN')} VNĐ\n\nVui lòng liên hệ lại với tôi qua email trên để tư vấn thêm.\nCảm ơn.\n        `.trim().replace(/^\\s+/gm, '');\n\n        const mailtoLink = `mailto:${recipient}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;\n        \n        window.location.href = mailtoLink;\n\n        setTimeout(() => {\n            emailNotification.classList.add('hidden');\n        }, 3000);\n    });\n\n    // --- Header Navigation & Side Menu Logic ---\n    const mainHeader = document.getElementById('main-header');\n    const hamburgerBtn = document.getElementById('hamburger-menu-button');\n    const closeSideMenuBtn = document.getElementById('close-side-menu');\n    const sideMenu = document.getElementById('side-menu');\n    const sideMenuOverlay = document.getElementById('side-menu-overlay');\n    const desktopNavList = document.getElementById('desktop-nav-list');\n    const sideNavList = document.getElementById('side-nav-list');\n\n    // Section definitions for both menus\n    const menuSections = [\n        { id: 'gioi-thieu', text: 'Giới thiệu', icon: '<svg class=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\"></path></svg>' },\n        { id: 've-chung-toi', text: 'Về chúng tôi', icon: '<svg class=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"></path></svg>' },\n        { id: 'yeu-to-anh-huong', text: 'Yếu tố ảnh hưởng', icon: '<svg class=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\"></path></svg>' },\n        { \n            id: 'bao-gia', text: 'Báo giá', icon: '<svg class=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\"></path></svg>',\n            subItems: [\n                { id: 'bao-gia-xd-tron-goi', text: 'XD Trọn Gói' },\n                { id: 'bao-gia-thiet-ke-kien-truc', text: 'Thiết Kế KT' },\n                { id: 'bao-gia-xd-phan-tho', text: 'XD Phần Thô' },\n                { id: 'bao-gia-xd-phan-hoan-thien', text: 'XD Hoàn Thiện' }\n            ]\n        },\n        { id: 'cac-goi-xay-dung', text: 'Gói xây dựng', icon: '<svg class=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z\"></path></svg>' },\n        { id: 'luu-y-quan-trong', text: 'Lưu ý quan trọng', icon: '<svg class=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z\"></path></svg>' },\n        { id: 'lien-he', text: 'Liên hệ', icon: '<svg class=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z\"></path></svg>' }\n    ];\n\n    // Function to generate menu items for a given list element\n    const generateMenuItems = (menuListElement, isSideMenu = false) => {\n        menuListElement.innerHTML = ''; // Clear existing items\n        menuSections.forEach(section => {\n            const listItem = document.createElement('li');\n            \n            // Determine the base class for the main link based on where it's being generated\n            const mainLinkClass = isSideMenu ? '' : 'nav-link'; // 'nav-link' for desktop header, no extra class for side menu (uses side-menu ul li a)\n\n            if (section.subItems) {\n                // Main item with sub-menu\n                listItem.innerHTML = `\n                    <a href=\"#${section.id}\" class=\"flex items-center ${mainLinkClass}\">\n                        ${isSideMenu ? (section.icon || '') : ''}<span>${section.text}</span>\n                    </a>\n                    <ul class=\"pl-4 mt-1 space-y-1 ${isSideMenu ? 'text-base' : 'text-sm'}\">\n                        ${section.subItems.map(subItem => `\n                            <li><a href=\"#${subItem.id}\" class=\"block p-1 rounded-md ${isSideMenu ? 'sub-side-link' : 'sub-nav-link'}\">${subItem.text}</a></li>\n                        `).join('')}\n                    </ul>\n                `;\n            } else {\n                // Regular item\n                listItem.innerHTML = `<a href=\"#${section.id}\" class=\"flex items-center ${mainLinkClass}\">${isSideMenu ? (section.icon || '') : ''}<span>${section.text}</span></a>`;\n            }\n            menuListElement.appendChild(listItem);\n        });\n    };\n\n    // Populate both menus on load\n    generateMenuItems(desktopNavList, false); // Populate desktop header nav\n    generateMenuItems(sideNavList, true); // Populate side menu\n\n    const allSections = document.querySelectorAll('section'); // All observable sections for IntersectionObserver\n    const allDesktopNavLinks = document.querySelectorAll('#desktop-nav-list a');\n    const allSideMenuLinks = document.querySelectorAll('#side-nav-list a');\n\n    const toggleSideMenu = () => {\n        sideMenu.classList.toggle('translate-x-full');\n        sideMenuOverlay.classList.toggle('hidden');\n        sideMenuOverlay.classList.toggle('opacity-0');\n        sideMenuOverlay.classList.toggle('opacity-50');\n        document.body.classList.toggle('overflow-hidden'); // Prevent body scroll when menu is open\n    };\n\n    hamburgerBtn.addEventListener('click', toggleSideMenu);\n    closeSideMenuBtn.addEventListener('click', toggleSideMenu);\n    sideMenuOverlay.addEventListener('click', toggleSideMenu);\n\n    // Close side menu when a link inside it is clicked\n    allSideMenuLinks.forEach(link => {\n        link.addEventListener('click', function(e) {\n            e.preventDefault(); // Prevent default hash jump\n            const targetId = this.getAttribute('href').substring(1);\n            const targetSection = document.getElementById(targetId);\n            if (targetSection) {\n                targetSection.scrollIntoView({ behavior: 'smooth' });\n            }\n            toggleSideMenu(); // Close the side menu after clicking a link\n        });\n    });\n\n    // Handle smooth scrolling for floating TOC links (already exists, but ensure it works)\n    // Note: The floating TOC is for large screens only, but the listener is harmless.\n    document.querySelectorAll('#floating-nav-list a').forEach(link => { // Re-selecting for clarity\n        link.addEventListener('click', function(e) {\n            e.preventDefault();\n            const targetId = this.getAttribute('href').substring(1);\n            const targetSection = document.getElementById(targetId);\n            if (targetSection) {\n                targetSection.scrollIntoView({ behavior: 'smooth' });\n            }\n        });\n    });\n\n\n    // Intersection Observer to highlight active section in both menus\n    const sectionObserver = new IntersectionObserver((entries) => {\n        entries.forEach(entry => {\n            if (entry.isIntersecting) {\n                const id = entry.target.getAttribute('id');\n\n                // Update desktop navigation links\n                allDesktopNavLinks.forEach(link => {\n                    link.classList.remove('active-nav-link'); // Correct class for desktop\n                    if (link.getAttribute('href') === `#${id}`) {\n                        link.classList.add('active-nav-link');\n                    } else if (id.startsWith('bao-gia-') && link.getAttribute('href') === '#bao-gia') {\n                        link.classList.add('active-nav-link'); // Highlight main 'Báo giá' if sub-section is active\n                    }\n                });\n\n                // Update side menu links\n                allSideMenuLinks.forEach(link => {\n                    link.classList.remove('active-side-link'); // Correct class for side menu\n                    if (link.getAttribute('href') === `#${id}`) {\n                        link.classList.add('active-side-link');\n                    } else if (id.startsWith('bao-gia-') && link.getAttribute('href') === '#bao-gia') {\n                        link.classList.add('active-side-link'); // Highlight main 'Báo giá' if sub-section is active\n                    }\n                });\n            }\n        });\n    }, { rootMargin: '-30% 0px -70% 0px' }); // Adjust rootMargin for active state accuracy\n\n    allSections.forEach(section => {\n        sectionObserver.observe(section);\n    });\n\n    // Optional: Shrink header on scroll (similar to TrungLuongCons.com)\n    const mainHeader = document.getElementById('main-header'); // Re-declare for clarity if not global\n    window.addEventListener('scroll', () => {\n        if (window.scrollY > 50) { // Adjust scroll threshold as needed\n            mainHeader.classList.add('header-scrolled');\n        } else {\n            mainHeader.classList.remove('header-scrolled');\n        }\n    });\n};\n"}]